<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Pure.Core</name>
    </assembly>
    <members>
        <member name="T:Pure.Core.Contracts.ICompositionRoot">
            <summary>
            A composition root that represents an application
            </summary>
        </member>
        <member name="M:Pure.Core.Contracts.ICompositionRoot.Bootstrap">
            <summary>
            Performs any required bootstrapping (such as IoC/DI registrations)
            </summary>
        </member>
        <member name="T:Pure.Core.Contracts.UnitsOfWork.IUnitOfWork">
            <summary>
            A unit of work. Outcome of associated operation is to be evaluated, and either wholly committed or wholly rolled back.
            </summary>
        </member>
        <member name="M:Pure.Core.Contracts.UnitsOfWork.IUnitOfWork.Begin">
            <summary>
            Begins the current <see cref="T:Pure.Core.Contracts.UnitsOfWork.IUnitOfWork"/>
            </summary>
        </member>
        <member name="M:Pure.Core.Contracts.UnitsOfWork.IUnitOfWork.Commit">
            <summary>
            Commits the current <see cref="T:Pure.Core.Contracts.UnitsOfWork.IUnitOfWork"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pure.Core.Contracts.UnitsOfWork.IUnitOfWork.Rollback">
            <summary>
            Rolls back the current <see cref="T:Pure.Core.Contracts.UnitsOfWork.IUnitOfWork"/>
            </summary>
            <returns></returns>
        </member>
        <member name="T:Pure.Core.Contracts.UnitsOfWork.IUnitOfWorkFactory">
            <summary>
            A factory that can create <see cref="T:Pure.Core.Contracts.UnitsOfWork.IUnitOfWork"/> objects
            </summary>
        </member>
        <member name="M:Pure.Core.Contracts.UnitsOfWork.IUnitOfWorkFactory.GetUnitOfWork">
            <summary>
            Gets an <see cref="T:Pure.Core.Contracts.UnitsOfWork.IUnitOfWork"/> instance
            </summary>
            <returns>An <see cref="T:Pure.Core.Contracts.UnitsOfWork.IUnitOfWork"/></returns>
        </member>
        <member name="T:Pure.Core.Contracts.Validation.IEntityValidationService`2">
            <summary>
            A service responsible for validating entities of type <typeparamref name="TEntity"/>
            </summary>
            <typeparam name="TEntity">The type of <see cref="T:Pure.Domain.IPersistableEntity`1"/> that the service can validate</typeparam>
            <typeparam name="TId">The type of the <see cref="T:Pure.Domain.IPersistableEntity`1"/>'s <see cref="P:Pure.Domain.IPersistableEntity`1.Id"/></typeparam>
        </member>
        <member name="M:Pure.Core.Contracts.Validation.IEntityValidationService`2.Validate(`0)">
            <summary>
            Validates the <paramref name="entity"/>
            </summary>
            <param name="entity">The entity to be validated</param>
            <returns>The outcome of validating the <paramref name="entity"/></returns>
        </member>
        <member name="T:Pure.Core.Contracts.Validation.IValidationOutcome">
            <summary>
            The result of validating a domain entity
            </summary>
        </member>
        <member name="T:Pure.Core.Implementations.AtomicCommand`2">
            <summary>
            An atomic command, which, when <see cref="M:Pure.Core.Implementations.AtomicCommand`2.Execute"/> is called, succeeds and commits, or fails and rolls back.
            </summary>
        </member>
        <member name="P:Pure.Core.Implementations.AtomicCommand`2.UnitOfWork">
            <summary>
            Gets the unit of work
            </summary>
        </member>
        <member name="M:Pure.Core.Implementations.AtomicCommand`2.#ctor(Pure.Core.Contracts.UnitsOfWork.IUnitOfWork)">
            <summary>
            Initialises a new <see cref="T:Pure.Core.Implementations.AtomicCommand`2"/> instance
            </summary>
            <param name="unitOfWork">The type of </param>
        </member>
        <member name="M:Pure.Core.Implementations.AtomicCommand`2.Execute">
            <summary>
            Executes the current command. The command should be all set up ready to execute before calling this method.
            </summary>
            <returns>An <see cref="T:Pure.Commands.ICommandOutcome"/> indicating the outcome of the command</returns>
        </member>
        <member name="M:Pure.Core.Implementations.AtomicCommand`2.Implementation">
            <summary>
            Override this method to implement the logic of an <see cref="T:Pure.Core.Implementations.AtomicCommand`2"/> type.
            Setup should have been done before the command is <see cref="M:Pure.Core.Implementations.AtomicCommand`2.Execute"/>d, including dependencies on on any ports and adapters,
            such as repositories and services, being made explicit in the constructor of the concrete class.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Pure.Core.Implementations.AtomicCommandFactory`2">
            <summary>
            A concrete factory that can create instances of <typeparamref name="TCommand"/>
            </summary>
        </member>
        <member name="M:Pure.Core.Implementations.AtomicCommandFactory`2.#ctor(Pure.Core.Contracts.UnitsOfWork.IUnitOfWorkFactory)">
            <summary>
            Initialises an atomic command factory instance.
            </summary>
            <param name="unitOfWorkFactory"></param>
        </member>
        <member name="P:Pure.Core.Implementations.AtomicCommandFactory`2.UnitOfWorkFactory">
            <summary>
            
            </summary>
        </member>
        <member name="M:Pure.Core.Implementations.AtomicCommandFactory`2.GetCommand">
            <summary>
            Gets an instance of the <see cref="T:Pure.Commands.IAtomicCommand`1"/> provided by the current factory
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pure.Core.Implementations.AtomicCommandFactory`2.InstantiateCommand(Pure.Core.Contracts.UnitsOfWork.IUnitOfWork)">
            <summary>
            Instantiates a command of the correct type, all set up and ready to execute
            </summary>
            <param name="unitOfWork"></param>
            <returns></returns>
        </member>
        <member name="T:Pure.Core.Implementations.CommandImplementationOutcome">
            <summary>
            The result of executing an <see cref="T:Pure.Core.Implementations.AtomicCommand`2"/>'s
            <see cref="M:Pure.Core.Implementations.AtomicCommand`2.Implementation"/> method
            </summary>
        </member>
        <member name="P:Pure.Core.Implementations.CommandImplementationOutcome.Outcome">
            <summary>
            Whether the command resulted in <see cref="F:Pure.Commands.CommandOutcomeType.Success"/> or <see cref="F:Pure.Commands.CommandOutcomeType.Failure"/>
            </summary>
        </member>
        <member name="T:Pure.Core.Implementations.CommandOutcome">
            <summary>
            The result of executing a command, indicating whether it was committed or rolled back
            </summary>
        </member>
        <member name="P:Pure.Core.Implementations.CommandOutcome.Outcome">
            <summary>
            Gets whether the command resulted in a <see cref="F:Pure.Commands.CommandOutcomeType.Success"/> or <see cref="F:Pure.Commands.CommandOutcomeType.Failure"/>
            </summary>
        </member>
    </members>
</doc>
